// Code generated by "enumer -json -transform=snake -type=Case -output=case_string.go case.go"; DO NOT EDIT.

//
package rules

import (
	"encoding/json"
	"fmt"
)

const _CaseName = "nominativegenitivedativeaccusativeinstrumentalprepositional"

var _CaseIndex = [...]uint8{0, 10, 18, 24, 34, 46, 59}

func (i Case) String() string {
	i -= -1
	if i < 0 || i >= Case(len(_CaseIndex)-1) {
		return fmt.Sprintf("Case(%d)", i+-1)
	}
	return _CaseName[_CaseIndex[i]:_CaseIndex[i+1]]
}

var _CaseValues = []Case{-1, 0, 1, 2, 3, 4}

var _CaseNameToValueMap = map[string]Case{
	_CaseName[0:10]:  -1,
	_CaseName[10:18]: 0,
	_CaseName[18:24]: 1,
	_CaseName[24:34]: 2,
	_CaseName[34:46]: 3,
	_CaseName[46:59]: 4,
}

// CaseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CaseString(s string) (Case, error) {
	if val, ok := _CaseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Case values", s)
}

// CaseValues returns all values of the enum
func CaseValues() []Case {
	return _CaseValues
}

// IsACase returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Case) IsACase() bool {
	for _, v := range _CaseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Case
func (i Case) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Case
func (i *Case) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Case should be a string, got %s", data)
	}

	var err error
	*i, err = CaseString(s)
	return err
}
